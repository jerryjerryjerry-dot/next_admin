// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==================== 基础模型 ====================

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique  // 用户名（登录用）
  email         String    @unique  // 邮箱
  name          String               // 真实姓名
  password      String?              // 密码哈希
  role          String    @default("user") // 角色：admin, user
  status        String    @default("active") // 状态：active, inactive, suspended
  
  // 个人信息
  phone         String?              // 手机号
  avatar        String?              // 头像URL
  department    String?              // 部门
  position      String?              // 职位
  description   String?              // 个人简介
  
  // 安全相关
  lastLoginAt   DateTime?            // 最后登录时间
  lastLoginIp   String?              // 最后登录IP
  loginAttempts Int       @default(0) // 登录失败次数
  lockedUntil   DateTime?            // 锁定到期时间
  
  // 系统字段
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdById   String?              // 创建者ID（管理员创建用户时）
  
  // 关联关系
  createdBy            User?                @relation("UserCreator", fields: [createdById], references: [id])
  createdUsers         User[]               @relation("UserCreator")
  posts                Post[]
  accounts             Account[]
  sessions             Session[]
  trafficDyeingRules  TrafficDyeingRule[]
  watermarkPolicies   WatermarkPolicy[]
  watermarkRecords    WatermarkRecord[]
  watermarkContents   WatermarkContent[]
  apiKeys             ApiKey[]
  passwordResets      UserPasswordReset[]
  loginLogs           UserLoginLog[]

  @@index([username])
  @@index([email])
  @@index([role])
  @@index([status])
  @@index([createdById])
}

// NextAuth 相关表（简化版，不使用但保留兼容性）
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  refresh_token_expires_in Int?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==================== 认证相关 ====================

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

// ==================== 用户管理扩展 ====================

model UserPasswordReset {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  expires     DateTime
  used        Boolean  @default(false)
  resetBy     String?  // 重置者ID（管理员重置时）
  resetType   String   @default("self") // self: 自己重置, admin: 管理员重置
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expires])
}

model UserLoginLog {
  id          String   @id @default(cuid())
  userId      String
  username    String   // 冗余字段，便于查询
  loginIp     String
  userAgent   String?
  success     Boolean
  failReason  String?  // 失败原因：wrong_password, user_locked, user_inactive等
  sessionId   String?  // 成功登录的会话ID
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([loginIp])
  @@index([success])
  @@index([createdAt])
}

model UserSession {
  id          String   @id @default(cuid())
  userId      String
  sessionId   String   @unique
  loginIp     String
  userAgent   String?
  isActive    Boolean  @default(true)
  lastActivity DateTime @default(now())
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  
  @@index([userId])
  @@index([sessionId])
  @@index([isActive])
  @@index([expiresAt])
}

// ==================== 流量管理 ====================

model TrafficDyeingRule {
  id          String   @id @default(cuid())
  name        String
  appType     String
  protocol    String
  targetIp    String
  priority    Int      @default(1)
  status      String   @default("active")
  dyeResult   String?
  traceInfo   String?
  reportData  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([status])
  @@index([appType])
  @@index([createdById])
}

// ==================== 应用管理 ====================

model AppCategory {
  id        String    @id @default(cuid())
  name      String
  parentId  String?
  level     Int       @default(0)
  appCount  Int       @default(0)
  isLeaf    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // 自引用关系
  parent   AppCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children AppCategory[] @relation("CategoryHierarchy")
  appEntries AppEntry[]

  @@map("app_categories")
  @@index([parentId])
  @@index([level])
}

model AppEntry {
  id           String      @id @default(cuid())
  appName      String
  appType      String
  categoryPath String
  ip           String?
  domain       String?
  url          String?
  status       String      @default("active")
  isBuiltIn    Boolean     @default(false)
  confidence   Float?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  category AppCategory @relation(fields: [appType], references: [id])

  @@map("app_entries")
  @@index([appType])
  @@index([status])
  @@index([isBuiltIn])
  @@index([ip])
  @@index([domain])
}

model AiLearnSuggestion {
  id            String   @id @default(cuid())
  ip            String?
  domain        String?
  url           String?
  predictedType String
  confidence    Float
  reason        String
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("ai_learn_suggestions")
  @@index([status])
  @@index([confidence])
}

// ==================== API 管理 ====================

model ApiCategory {
  id          String        @id @default(cuid())
  name        String        @unique
  displayName String
  description String?
  icon        String?
  status      String        @default("enabled")
  sortOrder   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  endpoints ApiEndpoint[]

  @@map("api_categories")
  @@index([status])
  @@index([sortOrder])
}

model ApiEndpoint {
  id             String      @id @default(cuid())
  categoryId     String
  name           String
  endpoint       String
  method         String
  description    String
  requestSchema  String
  responseSchema String
  deprecated     Boolean     @default(false)
  rateLimit      Int?
  requireAuth    Boolean     @default(false)
  status         String      @default("active")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  category ApiCategory @relation(fields: [categoryId], references: [id])
  apiCalls ApiCall[]

  @@map("api_endpoints")
  @@unique([endpoint, method])
  @@index([categoryId])
  @@index([status])
  @@index([method])
}

model ApiKey {
  id              String    @id @default(cuid())
  keyName         String
  purpose         String
  accessKeyId     String    @unique
  accessKeySecret String
  permissions     String
  quotaLimit      Int?
  quotaUsed       Int       @default(0)
  status          String    @default("active")
  lastUsedAt      DateTime?
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  
  user     User      @relation(fields: [userId], references: [id])
  apiCalls ApiCall[]

  @@map("api_keys")
  @@index([userId])
  @@index([status])
  @@index([accessKeyId])
}

model ApiCall {
  id           String      @id @default(cuid())
  apiKeyId     String
  endpointId   String
  method       String
  endpoint     String
  parameters   String?
  response     String?
  statusCode   Int
  responseTime Int?
  success      Boolean
  errorMessage String?
  userAgent    String?
  clientIp     String?
  createdAt    DateTime    @default(now())
  
  apiKey        ApiKey      @relation(fields: [apiKeyId], references: [id])
  apiEndpoint   ApiEndpoint @relation(fields: [endpointId], references: [id])

  @@map("api_calls")
  @@index([apiKeyId])
  @@index([endpointId])
  @@index([createdAt])
  @@index([success])
}

// ==================== 水印管理 ====================

model WatermarkPolicy {
  id            String   @id @default(cuid())
  name          String
  description   String?
  watermarkText String
  opacity       Float    @default(0.3)
  fontSize      Int      @default(24)
  color         String   @default("#666666")
  position      String   @default("center") // center, diagonal, corner
  fileTypes     String?  @default("all")
  sensitivity   String?  @default("medium")
  embedDepth    Int      @default(5)
  isActive      Boolean  @default(true)
  isDefault     Boolean  @default(false)
  status        String   @default("active")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   String
  
  createdBy User              @relation(fields: [createdById], references: [id])
  records   WatermarkRecord[]

  @@map("watermark_policies")
  @@index([status])
  @@index([isActive])
  @@index([createdById])
}

// 水印内容表 - 存储水印ID与内容的映射关系
model WatermarkContent {
  id               String   @id @default(cuid())
  watermarkId      String   @unique // 嵌入到文件中的唯一标识
  content          String   // 实际的水印文本内容
  bizId            String?  // 业务ID
  embedTaskId      String?  // 嵌入任务ID
  originalFileHash String?  // 原始文件hash
  watermarkFileHash String? // 带水印文件hash
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdById      String
  
  createdBy User              @relation(fields: [createdById], references: [id])
  records   WatermarkRecord[]

  @@map("watermark_contents")
  @@index([watermarkId])
  @@index([originalFileHash])
  @@index([createdById])
  @@index([createdAt])
}

model WatermarkRecord {
  id                String           @id @default(cuid())
  fileName          String
  fileSize          Int
  fileHash          String?          // 文件hash
  fileUrl           String           // 文件URL
  operation         String           // embed 或 extract
  policyId          String?
  watermarkText     String?          // 用户输入的原始文本
  watermarkId       String?          // 关联的水印ID
  taskId            String?          // 任务ID
  status            String           @default("pending") // pending, processing, completed, failed
  progress          Int              @default(0)
  result            String?          // 处理结果
  processedFileUrl  String?          // 处理后文件URL
  originalFileHash  String?          // 原始文件hash
  processedFileHash String?          // 处理后文件hash
  metadata          String?          // 额外元数据
  errorMessage      String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdById       String
  
  policy          WatermarkPolicy?  @relation(fields: [policyId], references: [id])
  watermarkContent WatermarkContent? @relation(fields: [watermarkId], references: [watermarkId])
  createdBy       User              @relation(fields: [createdById], references: [id])

  @@map("watermark_records")
  @@index([status])
  @@index([operation])
  @@index([watermarkId])
  @@index([createdById])
  @@index([createdAt])
}