// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==================== 基础模型 ====================

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // 关联关系
  posts                Post[]
  accounts             Account[]
  sessions             Session[]
  trafficDyeingRules  TrafficDyeingRule[]
  watermarkPolicies   WatermarkPolicy[]
  watermarkRecords    WatermarkRecord[]
  apiKeys             ApiKey[]
}

// NextAuth 相关表（简化版，不使用但保留兼容性）
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  refresh_token_expires_in Int?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==================== 认证相关 ====================

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

// ==================== 流量管理 ====================

model TrafficDyeingRule {
  id          String   @id @default(cuid())
  name        String
  appType     String
  protocol    String
  targetIp    String
  priority    Int      @default(1)
  status      String   @default("active")
  dyeResult   String?
  traceInfo   String?
  reportData  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([status])
  @@index([appType])
  @@index([createdById])
}

// ==================== 应用管理 ====================

model AppCategory {
  id        String    @id @default(cuid())
  name      String
  parentId  String?
  level     Int       @default(0)
  appCount  Int       @default(0)
  isLeaf    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // 自引用关系
  parent   AppCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children AppCategory[] @relation("CategoryHierarchy")
  appEntries AppEntry[]

  @@map("app_categories")
  @@index([parentId])
  @@index([level])
}

model AppEntry {
  id           String      @id @default(cuid())
  appName      String
  appType      String
  categoryPath String
  ip           String?
  domain       String?
  url          String?
  status       String      @default("active")
  isBuiltIn    Boolean     @default(false)
  confidence   Float?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  category AppCategory @relation(fields: [appType], references: [id])

  @@map("app_entries")
  @@index([appType])
  @@index([status])
  @@index([isBuiltIn])
  @@index([ip])
  @@index([domain])
}

model AiLearnSuggestion {
  id            String   @id @default(cuid())
  ip            String?
  domain        String?
  url           String?
  predictedType String
  confidence    Float
  reason        String
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("ai_learn_suggestions")
  @@index([status])
  @@index([confidence])
}

// ==================== API 管理 ====================

model ApiCategory {
  id          String        @id @default(cuid())
  name        String        @unique
  displayName String
  description String?
  icon        String?
  status      String        @default("enabled")
  sortOrder   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  endpoints ApiEndpoint[]

  @@map("api_categories")
  @@index([status])
  @@index([sortOrder])
}

model ApiEndpoint {
  id             String      @id @default(cuid())
  categoryId     String
  name           String
  endpoint       String
  method         String
  description    String
  requestSchema  String
  responseSchema String
  deprecated     Boolean     @default(false)
  rateLimit      Int?
  requireAuth    Boolean     @default(false)
  status         String      @default("active")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  category ApiCategory @relation(fields: [categoryId], references: [id])
  apiCalls ApiCall[]

  @@map("api_endpoints")
  @@unique([endpoint, method])
  @@index([categoryId])
  @@index([status])
  @@index([method])
}

model ApiKey {
  id              String    @id @default(cuid())
  keyName         String
  purpose         String
  accessKeyId     String    @unique
  accessKeySecret String
  permissions     String
  quotaLimit      Int?
  quotaUsed       Int       @default(0)
  status          String    @default("active")
  lastUsedAt      DateTime?
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  
  user     User      @relation(fields: [userId], references: [id])
  apiCalls ApiCall[]

  @@map("api_keys")
  @@index([userId])
  @@index([status])
  @@index([accessKeyId])
}

model ApiCall {
  id           String      @id @default(cuid())
  apiKeyId     String
  endpointId   String
  method       String
  endpoint     String
  parameters   String?
  response     String?
  statusCode   Int
  responseTime Int?
  success      Boolean
  errorMessage String?
  userAgent    String?
  clientIp     String?
  createdAt    DateTime    @default(now())
  
  apiKey        ApiKey      @relation(fields: [apiKeyId], references: [id])
  apiEndpoint   ApiEndpoint @relation(fields: [endpointId], references: [id])

  @@map("api_calls")
  @@index([apiKeyId])
  @@index([endpointId])
  @@index([createdAt])
  @@index([success])
}

// ==================== 水印管理 ====================

model WatermarkPolicy {
  id          String   @id @default(cuid())
  name        String
  fileTypes   String
  sensitivity String
  embedDepth  Int      @default(5)
  description String?
  isDefault   Boolean  @default(false)
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  
  createdBy User              @relation(fields: [createdById], references: [id])
  records   WatermarkRecord[]

  @@map("watermark_policies")
  @@index([status])
  @@index([createdById])
}

model WatermarkRecord {
  id            String           @id @default(cuid())
  fileName      String
  fileSize      Int
  fileHash      String?
  fileUrl       String
  operation     String
  policyId      String?
  watermarkText String?
  taskId        String?
  status        String           @default("pending")
  progress      Int              @default(0)
  result        String?
  metadata      String?
  errorMessage  String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  createdById   String
  
  policy    WatermarkPolicy? @relation(fields: [policyId], references: [id])
  createdBy User             @relation(fields: [createdById], references: [id])

  @@map("watermark_records")
  @@index([status])
  @@index([operation])
  @@index([createdById])
  @@index([createdAt])
}